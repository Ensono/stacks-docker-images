name: "$(Build.SourceBranchName)-init"

parameters:
  - name: force_deploy
    displayName: Force build and publish to Live
    type: boolean
    default: false
  - name: upload
    displayName: Upload generated files
    type: boolean
    default: false
  - name: debug
    displayName: Turn on debug for the Independent Runner
    type: boolean
    default: false
  - name: stages
    displayName: Container Image Stages
    type: object
    default:
      - stage: FoundationPowerShell
        displayName: "[CONTAINER] Foundation - PowerShell"
        dependsOn:
          - Documentation
          - Infrastructure
        taskName: build:foundation:powershell
        imageName: ensono/eir-foundation-powershell
        docsPath: foundation/powershell

      - stage: FoundationBuilder
        displayName: "[CONTAINER] Foundation - Builder"
        dependsOn:
          - Documentation
          - FoundationPowerShell
        taskName: build:foundation:builder
        imageName: ensono/eir-foundation-builder
        docsPath: foundation/builder

      - stage: FoundationAzureCli
        displayName: "[CONTAINER] Foundation - Azure CLI"
        dependsOn:
          - FoundationBuilder
          - FoundationPowerShell
        taskName: build:foundation:azure-cli
        imageName: ensono/eir-foundation-azure-cli
        docsPath: foundation/azure-cli

      - stage: FoundationTools
        displayName: "[CONTAINER] Foundation - Tools"
        dependsOn:
          - FoundationBuilder
          - FoundationPowerShell
        taskName: build:foundation:tools
        imageName: ensono/eir-foundation-tools
        docsPath: foundation/tools

      - stage: Infra
        displayName: "[CONTAINER] Infrastructure"
        dependsOn:
          - FoundationTools
          - FoundationAzureCli
        taskName: build:infrastructure
        imageName: ensono/eir-infrastructure
        docsPath: infrastructure

      - stage: Java
        displayName: "[CONTAINER] Java"
        dependsOn:
          - FoundationTools
        taskName: build:java
        imageName: ensono/eir-java
        docsPath: java

      - stage: DotNet
        displayName: "[CONTAINER] .NET"
        dependsOn:
          - Java
        taskName: build:dotnet
        imageName: ensono/eir-dotnet
        docsPath: dotnet

      - stage: Go
        displayName: "[CONTAINER] Go"
        dependsOn:
          - FoundationBuilder
          - FoundationPowerShell
        taskName: build:golang
        imageName: ensono/eir-golang
        docsPath: golang

      - stage: Inspec
        displayName: "[CONTAINER] Inspec"
        dependsOn:
          - FoundationBuilder
          - FoundationPowerShell
          - FoundationTools
        taskName: build:inspec
        imageName: ensono/eir-inspec
        docsPath: inspec

      - stage: Kong
        displayName: "[CONTAINER] Kong"
        dependsOn:
          - DotNet
        taskName: build:kong
        imageName: ensono/eir-kong
        docsPath: kong

      - stage: NodeJS
        displayName: "[CONTAINER] NodeJS"
        dependsOn:
          - FoundationBuilder
          - FoundationPowerShell
        taskName: build:node
        imageName: ensono/eir-nodejs
        docsPath: node

      - stage: AsciiDoctor
        displayName: "[CONTAINER] AsciiDoctor"
        dependsOn:
          - Java
          - NodeJS
        taskName: build:asciidoctor
        imageName: ensono/eir-asciidoctor
        docsPath: asciidoctor

      - stage: AzureData
        displayName: "[CONTAINER] Azure Data"
        dependsOn:
          - FoundationTools
          - FoundationAzureCli
        taskName: build:data
        imageName: ensono/eir-azure-data
        docsPath: data

pr:
  - main

trigger:
  branches:
    include:
      - "main"
  paths:
    include:
      - "*"

variables:
  - template: azuredevops-vars.yml
  - name: DebugPreference
    value: "Continue"

# Configure the stages
stages:
  - stage: Infrastructure
    variables:
      - group: azure-sp-creds
    jobs:
      - job: DeployInfrastructure
        condition: and(ne(variables['Build.SourceBranchName'], 'main'), eq(lower(${{ parameters['force_deploy'] }}), 'false'))
        steps:
          - template: templates/configure_agent.yml
            parameters:
              TaskctlVersion: $(TaskctlVersion)
              EnsonoBuildVersion: $(EnsonoBuildVersion)
              DockerPushRMVersion: $(DockerPushRMVersion)
              YqVersion: $(YqVersion)
              # NOTE: These won't be set properly for this job...
              # $(BuildNumber) is set below from `taskctl setup`
              # $(DockerContainerRegistryName) is from a variable group not
              # defined here
              # The build doesn't currently use these as the TF runs on the host
              BuildNumber: "notused"
              DockerContainerRegistryName: "notused"

          - task: Bash@3
            displayName: Setup
            inputs:
              targetType: inline
              script: |
                taskctl setup

          - task: Bash@3
            displayName: Terraform Variables
            inputs:
              targetType: inline
              script: |
                taskctl infrastructure_variables
            env:
              STAGE: acr
              TASKCTL_DEBUG: ${{ lower(parameters.debug) }}
              TF_FILE_LOCATION: deploy/terraform/azure/acr

              TF_VAR_name_company: $(name_company)
              TF_VAR_name_component: $(name_component)
              TF_VAR_name_project: $(name_project)

          # Upload the Terraform variables file and the plan for debugging
          - ${{ if eq(parameters.upload, true) }}:
              - template: templates/upload.yml

          - task: Bash@3
            displayName: Infrastructure
            inputs:
              targetType: inline
              script: |
                taskctl infrastructure
            env:
              CLOUD_PLATFORM: azure
              TASKCTL_DEBUG: ${{ lower(parameters.debug) }}
              TF_BACKEND_INIT: "key=$(tf_state_key),storage_account_name=$(tf_state_storage),resource_group_name=$(tf_state_rg),container_name=$(tf_state_container)"
              TF_FILE_LOCATION: deploy/terraform/azure/acr
              STAGE: acr

      - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
          - job: NoOp
            steps:
              - task: Bash@3
                displayName: NoOp
                inputs:
                  targetType: inline
                  script: |
                    exit

  - stage: Documentation
    displayName: Documentation
    dependsOn:
    jobs:
      - job: GenerateDocumentation
        steps:
          - template: templates/configure_agent.yml
            parameters:
              TaskctlVersion: $(TaskctlVersion)
              EnsonoBuildVersion: $(EnsonoBuildVersion)
              DockerPushRMVersion: $(DockerPushRMVersion)
              YqVersion: $(YqVersion)
              BuildNumber: $(Build.BuildNumber)
              # NOTE: This variable isn't imported into this job, we don't use
              # it for this job anyway...
              DockerContainerRegistryName: "notused"

          # Generate the documentation
          - task: Bash@3
            displayName: Generate Documentation
            inputs:
              targetType: inline
              script: |
                taskctl docs

          # Upload the documentation
          - task: PublishBuildArtifacts@1
            displayName: Publish Documentation
            inputs:
              pathToPublish: $(Build.SourcesDirectory)/outputs/docs
              artifactName: docs

          - task: Bash@3
            displayName: Create Image Overview
            inputs:
              targetType: inline
              script: |
                taskctl generate:docker:overview

          # Upload the overview documentation
          - task: PublishBuildArtifacts@1
            displayName: Publish Image Overview Documentation
            inputs:
              pathToPublish: $(Build.SourcesDirectory)/markdown
              artifactName: markdown-docs

  - ${{ each stage in parameters.stages }}:
      - stage: ${{ stage.stage }}
        displayName: ${{ stage.displayName }}
        dependsOn: ${{ stage.dependsOn }}
        variables:
          - ${{ if or(eq(parameters['force_deploy'], 'true'), eq(variables['Build.SourceBranch'], 'refs/heads/main')) }}:
              - group: stacks-docker-creds
          - ${{ else }}:
              - group: stacks-acr-creds
        jobs:
          - job: BuildImage_amd64
            displayName: Build Image - amd64
            pool: $(build_pool_amd64)
            steps:
              - template: templates/configure_agent.yml
                parameters:
                  TaskctlVersion: $(TaskctlVersion)
                  EnsonoBuildVersion: $(EnsonoBuildVersion)
                  DockerPushRMVersion: $(DockerPushRMVersion)
                  YqVersion: $(YqVersion)
                  BuildNumber: $(Build.BuildNumber)
                  DockerContainerRegistryName: $(DOCKER_CONTAINER_REGISTRY_NAME)

              - task: Bash@3
                displayName: Build Image
                inputs:
                  targetType: inline
                  script: |
                    taskctl ${{ stage.taskName }}
                env:
                  DOCKER_IMAGE_NAME: ${{ stage.imageName }}
                  DOCKER_IMAGE_TAG: $(Build.BuildNumber)
                  PLATFORM: linux/amd64

          - job: BuildImage_arm64
            displayName: Build Image - arm64
            pool: $(build_pool_arm64)
            steps:
              - template: templates/configure_agent.yml
                parameters:
                  TaskctlVersion: $(TaskctlVersion)
                  EnsonoBuildVersion: $(EnsonoBuildVersion)
                  DockerPushRMVersion: $(DockerPushRMVersion)
                  YqVersion: $(YqVersion)
                  BuildNumber: $(Build.BuildNumber)
                  DockerContainerRegistryName: $(DOCKER_CONTAINER_REGISTRY_NAME)

              - task: Bash@3
                displayName: Build Image
                inputs:
                  targetType: inline
                  script: |
                    taskctl ${{ stage.taskName }}
                env:
                  DOCKER_IMAGE_NAME: ${{ stage.imageName }}
                  DOCKER_IMAGE_TAG: $(Build.BuildNumber)
                  PLATFORM: linux/arm64

          - job: create_manifest
            displayName: Create Multi-Arch Manifest
            dependsOn:
              - BuildImage_amd64
              - BuildImage_arm64
            steps:
              - task: DownloadPipelineArtifact@2
                inputs:
                  artifactName: markdown-docs
                  targetPath: $(System.DefaultWorkingDirectory)/markdown

              - template: templates/configure_agent.yml
                parameters:
                  TaskctlVersion: $(TaskctlVersion)
                  EnsonoBuildVersion: $(EnsonoBuildVersion)
                  DockerPushRMVersion: $(DockerPushRMVersion)
                  YqVersion: $(YqVersion)
                  BuildNumber: $(Build.BuildNumber)
                  DockerContainerRegistryName: $(DOCKER_CONTAINER_REGISTRY_NAME)

              - task: Bash@3
                displayName: Create Multi-Arch Manifest
                inputs:
                  targetType: inline
                  script: |
                    taskctl create:docker:manifest
                env:
                  DOCKER_IMAGE_NAME: ${{ stage.imageName }}
                  DOCKER_IMAGE_TAG: $(Build.BuildNumber)
                  DOCS_PATH: ${{ stage.docsPath }}
