name: "$(Build.SourceBranchName)-init"

parameters:
  - name: upload
    displayName: Upload generated files
    type: boolean
    default: false
  - name: debug
    displayName: Turn on debug for the Independent Runner
    type: boolean
    default: false

pr:
  - main

trigger:
  branches:
    include:
      - "main"
  paths:
    include:
      - "*"

variables:
  - template: azuredevops-vars.yml
  - name: DebugPreference
    value: "Continue"

# Configure the stages
stages:
  - stage: ConfigureAgent

    jobs:
      - job: InstallComponents

        steps:
          # Install Taskctl for the build to run
          - task: Bash@3
            displayName: Install Taskctl
            inputs:
              targetType: inline
              script: |
                wget https://github.com/Ensono/taskctl/releases/download/v${{ variables.TaskctlVersion }}/taskctl_${{ variables.TaskctlVersion }}_linux_amd64.tar.gz -O /tmp/taskctl.tar.gz
                tar zxf /tmp/taskctl.tar.gz -C /usr/local/bin taskctl

          # Install the Independent Runner module for the base build
          - task: PowerShell@2
            displayName: Install Independent Runner
            inputs:
              targetType: inline
              script: |
                New-Item -Type directory -Path /home/vsts/.local/share/powershell/Modules/EnsonoBuild
                Invoke-WebRequest -Uri "https://github.com/Ensono/independent-runner/releases/download/v${{ variables.EnsonoBuild }}/EnsonoBuild.psd1" -OutFile /home/vsts/.local/share/powershell/Modules/EnsonoBuild/EnsonoBuild.psd1
                Invoke-WebRequest -Uri "https://github.com/Ensono/independent-runner/releases/download/v${{ variables.EnsonoBuild }}/EnsonoBuild.psm1" -OutFile /home/vsts/.local/share/powershell/Modules/EnsonoBuild/EnsonoBuild.psm1

  - stage: ConfigureInfrastructure
    dependsOn: ConfigureAgent
    variables:
      - group: ensono-sp-creds

    jobs:
      - job: GetBuildNumber

        steps:
          - task: Bash@3
            displayName: Setup
            inputs:
              targetType: inline
              script: |
                taskctl setup

      - job: CreateTFVarsFile

        steps:
          - task: Bash@3
            displayName: Terraform Variables
            inputs:
              targetType: inline
              script: |
                taskctl infrastructure_variables
            env:
              STAGE: acr
              TASKCTL_DEBUG: ${{ lower(parameters.debug) }}
              TF_FILE_LOCATION: /app/deploy/terraform/azure/acr

              TF_VAR_name_company: $(name_company)
              TF_VAR_name_component: $(name_component)
              TF_VAR_name_project: $(name_project)

      - job: UploadGeneratedFiles
        condition: eq(${{ parameters.upload }}, true)

        steps:
          # Upload the Terraform variables file and the plan for debugging
          - template: templates/upload.yml

      - job: DeployInfrastructure

        steps:
          - task: Bash@3
            displayName: Infrastructure
            inputs:
              targetType: inline
              script: |
                taskctl infrastructure
            env:
              CLOUD_PLATFORM: azure
              TASKCTL_DEBUG: ${{ lower(parameters.debug) }}
              TF_BACKEND_INIT: "key=$(tf_state_key),storage_account_name=$(tf_state_storage),resource_group_name=$(tf_state_rg),container_name=$(tf_state_container)"
              TF_FILE_LOCATION: /app/deploy/terraform/azure/acr
              STAGE: acr

  - stage: FoundationPowerShell
    displayName: Foundation - PowerShell
    dependsOn: ConfigureInfrastructure
    variables:
      - group: ensono-sp-creds

    jobs:
      - job: BuildImage

        steps:
          - task: Bash@3
            displayName: Build Image
            inputs:
              targetType: inline
              script: |
                taskctl build:foundation:powershell
            env:
              DOCKER_IMAGE_TAG: $(Build.BuildNumber)

  - stage: FoundationTools
    displayName: Foundation - Tools
    dependsOn: FoundationPowerShell
    variables:
      - group: ensono-sp-creds

    jobs:
      - job: BuildImage

        steps:
          - task: Bash@3
            displayName: Build Image
            inputs:
              targetType: inline
              script: |
                taskctl build:foundation:tools
            env:
              DOCKER_IMAGE_TAG: $(Build.BuildNumber)

            # - task: Bash@3
            # displayName: Foundation - PowerShell
            # inputs:
            #   targetType: inline
            #   script: |
            #     taskctl build:foundation:tools
            # env:
            #   DOCKER_USERNAME: $(DOCKER_USERNAME)
            #   DOCKER_PASSWORD: $(DOCKER_PASSWORD)
            #   DOCKER_IMAGE_TAG: $(Build.BuildNumber)
            #   DOCKER_CONTAINER_REGISTRY_NAME: $(DOCKER_CONTAINER_REGISTRY_NAME)

            # - task: Bash@3
            #   displayName: Publish to Dashboard
            #   inputs:
            #     targetType: inline
            #     script: |
            #       taskctl publish
            #   env:
            #     ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}: # On main branch runs
            #       PUBLISH_RELEASE: $true
            #     DASHBOARD_INFLUX_TOKEN: $(DASHBOARD_INFLUX_TOKEN) # requires explicit mapping to be used as an env var

            # # Generate the documentation
            # - task: Bash@3
            #   displayName: Generate Documentation
            #   inputs:
            #     targetType: inline
            #     script: |
            #       taskctl docs

            # # Upload the documentation
            # - task: PublishBuildArtifacts@1
            #   displayName: Publish Documentation
            #   inputs:
            #     pathToPublish: $(Build.SourcesDirectory)/outputs/docs
            #     artifactName: docs
