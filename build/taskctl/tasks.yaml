# Compilation tasks
tasks:
  infra:init:
    context: powershell_docker
    description: Initialise Terraform for chosen templates
    command:
      - Invoke-Terraform -Init -Path $env:TF_FILE_LOCATION -Arguments $env:TF_BACKEND_INIT -debug
      # - Invoke-Terraform -Workspace -Arguments $env:ENV_NAME -Path $env:TF_FILE_LOCATION

  infra:vars:
    context: powershell_docker
    description: Create Terraform variables file
    command:
      - /app/build/scripts/Set-TFVars.ps1 | Tee-Object -FilePath "${env:TF_FILE_LOCATION}/terraform.tfvars"

  infra:plan:
    context: powershell_docker
    description: Plan Terraform
    command:
      - Invoke-Terraform -Plan -Path $env:TF_FILE_LOCATION -Arguments "-input=false","-out=tfplan" -Debug

  infra:apply:
    context: powershell_docker
    description: Apply Terraform
    command:
      - Invoke-Terraform -Apply -Path "${env:TF_FILE_LOCATION}/tfplan"

  infra:destroy:plan:
    context: powershell_docker
    description: Destroy Environment.ShortName
    command:
      - Invoke-Terraform -Plan -Path $env:TF_FILE_LOCATION -Arguments "-destroy","-input=false","-out=destroy-tfplan" -debug | Out-Null

  infra:destroy:apply:
    context: powershell_docker
    description: Destroy Environment.ShortName
    command:
      - Invoke-Terraform -Apply -Path "${env:TF_FILE_LOCATION}/destroy-tfplan" -Arguments @("-destroy") -debug

  setup:environment:
    context: powershell_docker
    description: Ensure that the environment is configured correctly
    command:
      - Confirm-Environment -Path /app/build/config/stage_envvars.yml

  build:image:local:
    context: powershell
    description: Build the foundation image on the machine without using a container
    command:
      - |
        # $env:DOCKER_CLI_AKV2_EXPERIMENTAL="enabled"

        # $sep = (Test-Path -Path "C:\") ? ";" : ":"
        # $env:PSModulePath += "${sep}/home/vsts/modules"
        # Import-Module EnsonoBuild
        # Build-DockerImage  -Name {{ .IMAGE_NAME }} -buildargs "{{ .DOCKER_BUILD_ARGS }}" -platforms "linux/amd64","linux/arm64"
        # $cmd = "docker buildx build --push --platform linux/amd64,linux/arm64 -t $env:DOCKER_CONTAINER_REGISTRY_NAME/{{ .IMAGE_NAME }}:$env:DOCKER_IMAGE_TAG {{ .DOCKER_BUILD_ARGS }}"

        # docker login -u $env:DOCKER_USERNAME -p $env:DOCKER_PASSWORD $env:DOCKER_CONTAINER_REGISTRY_NAME

        # Write-Output $cmd
        # Invoke-Expression $cmd

        build/scripts/Docker-BuildImage.ps1 -platform linux/amd64,linux/arm64 -registry $env:DOCKER_CONTAINER_REGISTRY_NAME -Name {{ .IMAGE_NAME }} -Arguments "{{ .DOCKER_BUILD_ARGS }}"

  build:image:container:
    context: powershell_docker
    description: Build the foundation image on the machine without using a container
    command:
      - |
        $sep = (Test-Path -Path "C:\") ? ";" : ":"
        $env:PSModulePath += "${sep}/home/vsts/modules"
        Import-Module EnsonoBuild
        Build-DockerImage -push -provider generic -Name {{ .IMAGE_NAME }} -buildargs "{{ .DOCKER_BUILD_ARGS }}"

  build:container:
    context: powershell_docker
    description: Create container image for application
    command:
      - Write-Host "Build-DockerImage -push -provider generic -Name {{ .IMAGE_NAME }} -buildargs `"{{ .DOCKER_BUILD_ARGS }}`""
      - Build-DockerImage -Name {{ .IMAGE_NAME }} -buildargs "{{ .DOCKER_BUILD_ARGS }}" -latest
      #- Build-DockerImage -push -provider generic -Name {{ .IMAGE_NAME }} -buildargs "{{ .DOCKER_BUILD_ARGS }}" -latest0
    # Set variable IMAGE_NAME; i.e. stacks-api and DOCKER_BUILD_ARGS path i.e. ./image_definitions/base

  build:container:base:
    context: powershell
    description: Create Base image
    command:
      # - Write-Host "Build-DockerImage -push -generic -Name {{ .IMAGE_NAME }} -buildargs `"{{ .DOCKER_BUILD_ARGS }}`""
      # - Build-DockerImage -Name {{ .IMAGE_NAME }} -buildargs "{{ .DOCKER_BUILD_ARGS }}" -latest
      - |
        $env:PSModulePath += ":/home/vsts/modules"
        Import-Module AmidoBuild
        Build-DockerImage -push -provider generic -Name {{ .IMAGE_NAME }} -buildargs "{{ .DOCKER_BUILD_ARGS }}" -latest

  build:number:
    context: powershell
    description: Update the build number
    command:
      - Import-Module EnsonoBuild
      - Update-BuildNumber
    # Set variable DOCKER_IMAGE_TAG; i.e. 0.2.1

  update:dashboard:
    context: powershell_docker
    description: Update the Deployment Dashboard
    command:
      - Update-InfluxDashboard
    # TODO: Currently handled by ADO pipeline var, captured in Story 4122
    # env:
    #  PUBLISH_RELEASE: $true

  debug:
    context: powershell_docker
    description: debugs env vars
    command:
      - Get-ChildItem env:/

  _docs:
    description: Build Docs for Stacks CLI
    context: docsenv
    command:
      # - /app/build/scripts/Build-Docs.ps1 -BuildNumber $BUILDNUMBER -BasePath /app
      - Invoke-AsciiDoc -PDF -basepath /app -config /app/docs.json -debug
